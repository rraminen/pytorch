diff --git a/.circleci/docker/build.sh b/.circleci/docker/build.sh
index d206684a2087f..20a80cfe4c595 100755
--- a/.circleci/docker/build.sh
+++ b/.circleci/docker/build.sh
@@ -10,14 +10,35 @@ if [ -z "${image}" ]; then
   exit 1
 fi
 
-# TODO: Generalize
-OS="ubuntu"
-DOCKERFILE="${OS}/Dockerfile"
-if [[ "$image" == *-cuda* ]]; then
-  DOCKERFILE="${OS}-cuda/Dockerfile"
-elif [[ "$image" == *-rocm* ]]; then
-  DOCKERFILE="${OS}-rocm/Dockerfile"
-fi
+function extract_version_from_image_name() {
+  eval export $2=$(echo "${image}" | perl -n -e"/$1(\d+(\.\d+)?(\.\d+)?)/ && print \$1")
+  if [ "x${!2}" = x ]; then
+    echo "variable '$2' not correctly parsed from image='$image'"
+    exit 1
+  fi
+}
+
+function extract_all_from_image_name() {
+  # parts $image into array, splitting on '-'
+  keep_IFS="$IFS"
+  IFS="-"
+  declare -a parts=($image)
+  IFS="$keep_IFS"
+  unset keep_IFS
+
+  for part in "${parts[@]}"; do
+    name=$(echo "${part}" | perl -n -e"/([a-zA-Z]+)\d+(\.\d+)?(\.\d+)?/ && print \$1")
+    vername="${name^^}_VERSION"
+    # "py" is the odd one out, needs this special case
+    if [ "x${name}" = xpy ]; then
+      vername=ANACONDA_PYTHON_VERSION
+    fi
+    # skip non-conforming fields such as "pytorch", "linux" or "xenial" without version string
+    if [ -n "${name}" ]; then
+      extract_version_from_image_name "${name}" "${vername}"
+    fi
+  done
+}
 
 if [[ "$image" == *-trusty* ]]; then
   UBUNTU_VERSION=14.04
@@ -29,6 +50,26 @@ elif [[ "$image" == *-bionic* ]]; then
   UBUNTU_VERSION=18.04
 elif [[ "$image" == *-focal* ]]; then
   UBUNTU_VERSION=20.04
+elif [[ "$image" == *ubuntu* ]]; then
+  extract_version_from_image_name ubuntu UBUNTU_VERSION
+elif [[ "$image" == *centos* ]]; then
+  extract_version_from_image_name centos CENTOS_VERSION
+fi
+
+if [ -n "${UBUNTU_VERSION}" ]; then
+  OS="ubuntu"
+elif [ -n "${CENTOS_VERSION}" ]; then
+  OS="centos"
+else
+  echo "Unable to derive operating system base..."
+  exit 1
+fi
+
+DOCKERFILE="${OS}/Dockerfile"
+if [[ "$image" == *cuda* ]]; then
+  DOCKERFILE="${OS}-cuda/Dockerfile"
+elif [[ "$image" == *rocm* ]]; then
+  DOCKERFILE="${OS}-rocm/Dockerfile"
 fi
 
 TRAVIS_DL_URL_PREFIX="https://s3.amazonaws.com/travis-python-archives/binaries/ubuntu/14.04/x86_64"
@@ -240,6 +281,38 @@ case "$image" in
     VISION=yes
     ROCM_VERSION=3.5.1
     ;;
+  *)
+    # Catch-all for builds that are not hardcoded.
+    PROTOBUF=yes
+    DB=yes
+    VISION=yes
+    echo "image '$image' did not match an existing build configuration"
+    if [[ "$image" == *py* ]]; then
+      extract_version_from_image_name py ANACONDA_PYTHON_VERSION
+    fi
+    if [[ "$image" == *cuda* ]]; then
+      extract_version_from_image_name cuda CUDA_VERSION
+      extract_version_from_image_name cudnn CUDNN_VERSION
+    fi
+    if [[ "$image" == *rocm* ]]; then
+      extract_version_from_image_name rocm ROCM_VERSION
+    fi
+    if [[ "$image" == *gcc* ]]; then
+      extract_version_from_image_name gcc GCC_VERSION
+    fi
+    if [[ "$image" == *clang* ]]; then
+      extract_version_from_image_name clang CLANG_VERSION
+    fi
+    if [[ "$image" == *devtoolset* ]]; then
+      extract_version_from_image_name devtoolset DEVTOOLSET_VERSION
+    fi
+    if [[ "$image" == *glibc* ]]; then
+      extract_version_from_image_name glibc GLIBC_VERSION
+    fi
+    if [[ "$image" == *cmake* ]]; then
+      extract_version_from_image_name cmake CMAKE_VERSION
+    fi
+  ;;
 esac
 
 # Set Jenkins UID and GID if running Jenkins
@@ -268,6 +341,9 @@ docker build \
        --build-arg "JENKINS_UID=${JENKINS_UID:-}" \
        --build-arg "JENKINS_GID=${JENKINS_GID:-}" \
        --build-arg "UBUNTU_VERSION=${UBUNTU_VERSION}" \
+       --build-arg "CENTOS_VERSION=${CENTOS_VERSION}" \
+       --build-arg "DEVTOOLSET_VERSION=${DEVTOOLSET_VERSION}" \
+       --build-arg "GLIBC_VERSION=${GLIBC_VERSION}" \
        --build-arg "CLANG_VERSION=${CLANG_VERSION}" \
        --build-arg "ANACONDA_PYTHON_VERSION=${ANACONDA_PYTHON_VERSION}" \
        --build-arg "TRAVIS_PYTHON_VERSION=${TRAVIS_PYTHON_VERSION}" \
diff --git a/.circleci/docker/centos-rocm/Dockerfile b/.circleci/docker/centos-rocm/Dockerfile
new file mode 100644
index 0000000000000..1bc7b0deea322
--- /dev/null
+++ b/.circleci/docker/centos-rocm/Dockerfile
@@ -0,0 +1,93 @@
+ARG CENTOS_VERSION
+
+FROM centos:${CENTOS_VERSION}
+
+ARG CENTOS_VERSION
+
+# Install required packages to build Caffe2
+
+# Install common dependencies (so that this step can be cached separately)
+ARG EC2
+ADD ./common/install_base.sh install_base.sh
+RUN bash ./install_base.sh && rm install_base.sh
+
+# Install devtoolset
+ARG DEVTOOLSET_VERSION
+ADD ./common/install_devtoolset.sh install_devtoolset.sh
+RUN bash ./install_devtoolset.sh && rm install_devtoolset.sh
+ENV BASH_ENV "/etc/profile"
+
+# (optional) Install non-default glibc version
+ARG GLIBC_VERSION
+ADD ./common/install_glibc.sh install_glibc.sh
+RUN if [ -n "${GLIBC_VERSION}" ]; then bash ./install_glibc.sh; fi
+RUN rm install_glibc.sh
+
+# Install user
+ADD ./common/install_user.sh install_user.sh
+RUN bash ./install_user.sh && rm install_user.sh
+
+# Install conda
+ENV PATH /opt/conda/bin:$PATH
+ARG ANACONDA_PYTHON_VERSION
+ADD ./common/install_conda.sh install_conda.sh
+RUN bash ./install_conda.sh && rm install_conda.sh
+
+# (optional) Install protobuf for ONNX
+ARG PROTOBUF
+ADD ./common/install_protobuf.sh install_protobuf.sh
+RUN if [ -n "${PROTOBUF}" ]; then bash ./install_protobuf.sh; fi
+RUN rm install_protobuf.sh
+ENV INSTALLED_PROTOBUF ${PROTOBUF}
+
+# (optional) Install database packages like LMDB and LevelDB
+ARG DB
+ADD ./common/install_db.sh install_db.sh
+RUN if [ -n "${DB}" ]; then bash ./install_db.sh; fi
+RUN rm install_db.sh
+ENV INSTALLED_DB ${DB}
+
+# (optional) Install vision packages like OpenCV and ffmpeg
+ARG VISION
+ADD ./common/install_vision.sh install_vision.sh
+RUN if [ -n "${VISION}" ]; then bash ./install_vision.sh; fi
+RUN rm install_vision.sh
+ENV INSTALLED_VISION ${VISION}
+
+# Install rocm
+ARG ROCM_VERSION
+ADD ./common/install_rocm.sh install_rocm.sh
+RUN bash ./install_rocm.sh
+RUN rm install_rocm.sh
+ENV PATH /opt/rocm/bin:$PATH
+ENV PATH /opt/rocm/hcc/bin:$PATH
+ENV PATH /opt/rocm/hip/bin:$PATH
+ENV PATH /opt/rocm/opencl/bin:$PATH
+ENV PATH /opt/rocm/llvm/bin:$PATH
+ENV HIP_PLATFORM hcc
+ENV LANG en_US.utf8
+ENV LC_ALL en_US.utf8
+
+# (optional) Install non-default CMake version
+ARG CMAKE_VERSION
+ADD ./common/install_cmake.sh install_cmake.sh
+RUN if [ -n "${CMAKE_VERSION}" ]; then bash ./install_cmake.sh; fi
+RUN rm install_cmake.sh
+
+# (optional) Install non-default Ninja version
+ARG NINJA_VERSION
+ADD ./common/install_ninja.sh install_ninja.sh
+RUN if [ -n "${NINJA_VERSION}" ]; then bash ./install_ninja.sh; fi
+RUN rm install_ninja.sh
+
+# Install ccache/sccache (do this last, so we get priority in PATH)
+ADD ./common/install_cache.sh install_cache.sh
+ENV PATH /opt/cache/bin:$PATH
+RUN bash ./install_cache.sh && rm install_cache.sh
+
+# Include BUILD_ENVIRONMENT environment variable in image
+ARG BUILD_ENVIRONMENT
+ENV BUILD_ENVIRONMENT ${BUILD_ENVIRONMENT}
+
+USER jenkins
+CMD ["bash"]
diff --git a/.circleci/docker/common/install_base.sh b/.circleci/docker/common/install_base.sh
index 7504cf40fae14..ac4e1f18f1efb 100755
--- a/.circleci/docker/common/install_base.sh
+++ b/.circleci/docker/common/install_base.sh
@@ -2,51 +2,119 @@
 
 set -ex
 
-# NVIDIA dockers for RC releases use tag names like `11.0-cudnn8-devel-ubuntu18.04-rc`,
-# for this case we will set UBUNTU_VERSION to `18.04-rc` so that the Dockerfile could
-# find the correct image. As a result, here we have to check for
-#   "$UBUNTU_VERSION" == "18.04"*
-# instead of
-#   "$UBUNTU_VERSION" == "18.04"
-if [[ "$UBUNTU_VERSION" == "18.04"* ]]; then
-  cmake3="cmake=3.10*"
-else
-  cmake3="cmake=3.5*"
-fi
+install_ubuntu() {
+  # NVIDIA dockers for RC releases use tag names like `11.0-cudnn8-devel-ubuntu18.04-rc`,
+  # for this case we will set UBUNTU_VERSION to `18.04-rc` so that the Dockerfile could
+  # find the correct image. As a result, here we have to check for
+  #   "$UBUNTU_VERSION" == "18.04"*
+  # instead of
+  #   "$UBUNTU_VERSION" == "18.04"
+  if [[ "$UBUNTU_VERSION" == "18.04"* ]]; then
+    cmake3="cmake=3.10*"
+  else
+    cmake3="cmake=3.5*"
+  fi
+
+  # Install common dependencies
+  apt-get update
+  # TODO: Some of these may not be necessary
+  # TODO: libiomp also gets installed by conda, aka there's a conflict
+  ccache_deps="asciidoc docbook-xml docbook-xsl xsltproc"
+  numpy_deps="gfortran"
+  apt-get install -y --no-install-recommends \
+    $ccache_deps \
+    $numpy_deps \
+    ${cmake3} \
+    apt-transport-https \
+    autoconf \
+    automake \
+    build-essential \
+    ca-certificates \
+    curl \
+    git \
+    libatlas-base-dev \
+    libc6-dbg \
+    libiomp-dev \
+    libyaml-dev \
+    libz-dev \
+    libjpeg-dev \
+    libasound2-dev \
+    libsndfile-dev \
+    python \
+    python-dev \
+    python-setuptools \
+    python-wheel \
+    software-properties-common \
+    sudo \
+    wget \
+    vim
+
+  # TODO: THIS IS A HACK!!!
+  # distributed nccl(2) tests are a bit busted, see https://github.com/pytorch/pytorch/issues/5877
+  if dpkg -s libnccl-dev; then
+    apt-get remove -y libnccl-dev libnccl2 --allow-change-held-packages
+  fi
+
+  # Cleanup package manager
+  apt-get autoclean && apt-get clean
+  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
+}
+
+install_centos() {
+  # Need EPEL for many packages we depend on.
+  # See http://fedoraproject.org/wiki/EPEL
+  yum --enablerepo=extras install -y epel-release
 
-# Install common dependencies
-apt-get update
-# TODO: Some of these may not be necessary
-# TODO: libiomp also gets installed by conda, aka there's a conflict
-ccache_deps="asciidoc docbook-xml docbook-xsl xsltproc"
-numpy_deps="gfortran"
-apt-get install -y --no-install-recommends \
-  $ccache_deps \
-  $numpy_deps \
-  ${cmake3} \
-  apt-transport-https \
-  autoconf \
-  automake \
-  build-essential \
-  ca-certificates \
-  curl \
-  git \
-  libatlas-base-dev \
-  libc6-dbg \
-  libiomp-dev \
-  libyaml-dev \
-  libz-dev \
-  libjpeg-dev \
-  libasound2-dev \
-  libsndfile-dev \
-  python \
-  python-dev \
-  python-setuptools \
-  python-wheel \
-  software-properties-common \
-  sudo \
-  wget \
-  vim
+  ccache_deps="asciidoc docbook-dtds docbook-style-xsl libxslt"
+  numpy_deps="gcc-gfortran"
+  # Note: protobuf-c-{compiler,devel} on CentOS are too old to be used
+  # for Caffe2. That said, we still install them to make sure the build
+  # system opts to build/use protoc and libprotobuf from third-party.
+  yum install -y \
+    $ccache_deps \
+    $numpy_deps \
+    autoconf \
+    automake \
+    bzip2 \
+    cmake \
+    cmake3 \
+    curl \
+    gcc \
+    gcc-c++ \
+    gflags-devel \
+    git \
+    glibc-devel \
+    glibc-headers \
+    glog-devel \
+    hiredis-devel \
+    libstdc++-devel \
+    make \
+    opencv-devel \
+    sudo \
+    wget \
+    vim
+
+  # Cleanup
+  yum clean all
+  rm -rf /var/cache/yum
+  rm -rf /var/lib/yum/yumdb
+  rm -rf /var/lib/yum/history
+}
+
+# Install base packages depending on the base OS
+ID=$(grep -oP '(?<=^ID=).+' /etc/os-release | tr -d '"')
+case "$ID" in
+  ubuntu)
+    install_ubuntu
+    ;;
+  centos)
+    install_centos
+    ;;
+  *)
+    echo "Unable to determine OS..."
+    exit 1
+    ;;
+esac
 
 # Install Valgrind separately since the apt-get version is too old.
 mkdir valgrind_build && cd valgrind_build
@@ -64,12 +132,3 @@ cd ../../
 rm -rf valgrind_build
 alias valgrind="/usr/local/bin/valgrind"
 
-# TODO: THIS IS A HACK!!!
-# distributed nccl(2) tests are a bit busted, see https://github.com/pytorch/pytorch/issues/5877
-if dpkg -s libnccl-dev; then
-  apt-get remove -y libnccl-dev libnccl2 --allow-change-held-packages
-fi
-
-# Cleanup package manager
-apt-get autoclean && apt-get clean
-rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
diff --git a/.circleci/docker/common/install_conda.sh b/.circleci/docker/common/install_conda.sh
index 378858afc3ed2..08251f3e9c309 100755
--- a/.circleci/docker/common/install_conda.sh
+++ b/.circleci/docker/common/install_conda.sh
@@ -24,13 +24,20 @@ if [ -n "$ANACONDA_PYTHON_VERSION" ]; then
   mkdir /opt/conda
   chown jenkins:jenkins /opt/conda
 
+  # Work around bug where devtoolset replaces sudo and breaks it.
+  if [ -n "$DEVTOOLSET_VERSION" ]; then
+    SUDO=/bin/sudo
+  else
+    SUDO=sudo
+  fi
+
   as_jenkins() {
     # NB: unsetting the environment variables works around a conda bug
     # https://github.com/conda/conda/issues/6576
     # NB: Pass on PATH and LD_LIBRARY_PATH to sudo invocation
     # NB: This must be run from a directory that jenkins has access to,
     # works around https://github.com/conda/conda-package-handling/pull/34
-    sudo -H -u jenkins env -u SUDO_UID -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER env "PATH=$PATH" "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" $*
+    $SUDO -H -u jenkins env -u SUDO_UID -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER env "PATH=$PATH" "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" $*
   }
 
   pushd /tmp
@@ -49,10 +56,10 @@ if [ -n "$ANACONDA_PYTHON_VERSION" ]; then
   pushd /opt/conda
 
   # Track latest conda update
-  as_jenkins conda update -n base conda
+  as_jenkins conda update -y -n base conda
 
   # Install correct Python version
-  as_jenkins conda install python="$ANACONDA_PYTHON_VERSION"
+  as_jenkins conda install -y python="$ANACONDA_PYTHON_VERSION"
 
   conda_install() {
     # Ensure that the install command don't upgrade/downgrade Python
diff --git a/.circleci/docker/common/install_db.sh b/.circleci/docker/common/install_db.sh
index cb05da976b62e..626716c2facb4 100755
--- a/.circleci/docker/common/install_db.sh
+++ b/.circleci/docker/common/install_db.sh
@@ -51,11 +51,16 @@ install_centos() {
 }
 
 # Install base packages depending on the base OS
-if [ -f /etc/lsb-release ]; then
-  install_ubuntu
-elif [ -f /etc/os-release ]; then
-  install_centos
-else
-  echo "Unable to determine OS..."
-  exit 1
-fi
+ID=$(grep -oP '(?<=^ID=).+' /etc/os-release | tr -d '"')
+case "$ID" in
+  ubuntu)
+    install_ubuntu
+    ;;
+  centos)
+    install_centos
+    ;;
+  *)
+    echo "Unable to determine OS..."
+    exit 1
+    ;;
+esac
diff --git a/.circleci/docker/common/install_devtoolset.sh b/.circleci/docker/common/install_devtoolset.sh
new file mode 100755
index 0000000000000..bdae637598138
--- /dev/null
+++ b/.circleci/docker/common/install_devtoolset.sh
@@ -0,0 +1,10 @@
+#!/bin/bash
+
+set -ex
+
+[ -n "$DEVTOOLSET_VERSION" ]
+
+yum install -y centos-release-scl
+yum install -y devtoolset-$DEVTOOLSET_VERSION
+
+echo "source scl_source enable devtoolset-$DEVTOOLSET_VERSION" > "/etc/profile.d/devtoolset-$DEVTOOLSET_VERSION.sh"
diff --git a/.circleci/docker/common/install_glibc.sh b/.circleci/docker/common/install_glibc.sh
new file mode 100755
index 0000000000000..c98791e2bf85b
--- /dev/null
+++ b/.circleci/docker/common/install_glibc.sh
@@ -0,0 +1,34 @@
+#!/bin/bash
+
+set -ex
+
+[ -n "$GLIBC_VERSION" ]
+if [[ -n "$CENTOS_VERSION" ]]; then
+  [ -n "$DEVTOOLSET_VERSION" ]
+fi
+
+yum install -y wget sed
+
+mkdir -p /packages && cd /packages
+wget -q http://ftp.gnu.org/gnu/glibc/glibc-$GLIBC_VERSION.tar.gz
+tar xzf glibc-$GLIBC_VERSION.tar.gz
+if [[ "$GLIBC_VERSION" == "2.26" ]]; then
+  cd glibc-$GLIBC_VERSION
+  sed -i 's/$name ne "nss_test1"/$name ne "nss_test1" \&\& $name ne "nss_test2"/' scripts/test-installation.pl
+  cd ..
+fi
+mkdir -p glibc-$GLIBC_VERSION-build && cd glibc-$GLIBC_VERSION-build
+
+if [[ -n "$CENTOS_VERSION" ]]; then
+  export PATH=/opt/rh/devtoolset-$DEVTOOLSET_VERSION/root/usr/bin:$PATH
+fi
+
+../glibc-$GLIBC_VERSION/configure --prefix=/usr CFLAGS='-Wno-stringop-truncation -Wno-format-overflow -Wno-restrict -Wno-format-truncation -g -O2'
+make -j$(nproc)
+make install
+
+# Cleanup
+rm -rf /packages
+rm -rf /var/cache/yum/*
+rm -rf /var/lib/rpm/__db.*
+yum clean all
diff --git a/.circleci/docker/common/install_protobuf.sh b/.circleci/docker/common/install_protobuf.sh
index 169d47420fcd8..e01cd74970c3d 100755
--- a/.circleci/docker/common/install_protobuf.sh
+++ b/.circleci/docker/common/install_protobuf.sh
@@ -46,11 +46,16 @@ install_centos() {
 }
 
 # Install base packages depending on the base OS
-if [ -f /etc/lsb-release ]; then
-  install_ubuntu
-elif [ -f /etc/os-release ]; then
-  install_centos
-else
-  echo "Unable to determine OS..."
-  exit 1
-fi
+ID=$(grep -oP '(?<=^ID=).+' /etc/os-release | tr -d '"')
+case "$ID" in
+  ubuntu)
+    install_ubuntu
+    ;;
+  centos)
+    install_centos
+    ;;
+  *)
+    echo "Unable to determine OS..."
+    exit 1
+    ;;
+esac
diff --git a/.circleci/docker/common/install_rocm.sh b/.circleci/docker/common/install_rocm.sh
index 4f95d283b128c..4a60bd70e7798 100644
--- a/.circleci/docker/common/install_rocm.sh
+++ b/.circleci/docker/common/install_rocm.sh
@@ -62,7 +62,7 @@ install_centos() {
 
   echo "[ROCm]" > /etc/yum.repos.d/rocm.repo
   echo "name=ROCm" >> /etc/yum.repos.d/rocm.repo
-  echo "baseurl=http://repo.radeon.com/rocm/yum/rpm/" >> /etc/yum.repos.d/rocm.repo
+  echo "baseurl=http://repo.radeon.com/rocm/yum/${ROCM_VERSION}" >> /etc/yum.repos.d/rocm.repo
   echo "enabled=1" >> /etc/yum.repos.d/rocm.repo
   echo "gpgcheck=0" >> /etc/yum.repos.d/rocm.repo
 
@@ -90,11 +90,16 @@ install_centos() {
 }
 
 # Install Python packages depending on the base OS
-if [ -f /etc/lsb-release ]; then
-  install_ubuntu
-elif [ -f /etc/os-release ]; then
-  install_centos
-else
-  echo "Unable to determine OS..."
-  exit 1
-fi
+ID=$(grep -oP '(?<=^ID=).+' /etc/os-release | tr -d '"')
+case "$ID" in
+  ubuntu)
+    install_ubuntu
+    ;;
+  centos)
+    install_centos
+    ;;
+  *)
+    echo "Unable to determine OS..."
+    exit 1
+    ;;
+esac
diff --git a/.circleci/docker/common/install_vision.sh b/.circleci/docker/common/install_vision.sh
index 87074cdd1b5af..6db2067d29041 100755
--- a/.circleci/docker/common/install_vision.sh
+++ b/.circleci/docker/common/install_vision.sh
@@ -47,11 +47,16 @@ install_centos() {
 }
 
 # Install base packages depending on the base OS
-if [ -f /etc/lsb-release ]; then
-  install_ubuntu
-elif [ -f /etc/os-release ]; then
-  install_centos
-else
-  echo "Unable to determine OS..."
-  exit 1
-fi
+ID=$(grep -oP '(?<=^ID=).+' /etc/os-release | tr -d '"')
+case "$ID" in
+  ubuntu)
+    install_ubuntu
+    ;;
+  centos)
+    install_centos
+    ;;
+  *)
+    echo "Unable to determine OS..."
+    exit 1
+    ;;
+esac
